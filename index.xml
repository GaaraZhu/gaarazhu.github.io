<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gary&#39;s Blog</title>
    <link>https://GaaraZhu.github.io/</link>
    <description>Recent content on Gary&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>sec.gary@gmail.com (GaryZhu)</managingEditor>
    <webMaster>sec.gary@gmail.com (GaryZhu)</webMaster>
    <lastBuildDate>Fri, 02 Apr 2021 11:09:48 +1300</lastBuildDate><atom:link href="https://GaaraZhu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chat the Ops up</title>
      <link>https://GaaraZhu.github.io/chat-the-ops-up/</link>
      <pubDate>Fri, 02 Apr 2021 11:09:48 +1300</pubDate>
      <author>sec.gary@gmail.com (GaryZhu)</author>
      <guid>https://GaaraZhu.github.io/chat-the-ops-up/</guid>
      <description>TL;DR 
This is the story of how we improved our CI/CD methodology by using Bamboo-on-Teams, a serverless ChatOps tool for interacting with Atlassian Bamboo from Microsoft Teams.</description>
    </item>
    
    <item>
      <title>Java深度克隆</title>
      <link>https://GaaraZhu.github.io/deep-clone/</link>
      <pubDate>Fri, 28 Sep 2012 08:33:51 +1300</pubDate>
      <author>sec.gary@gmail.com (GaryZhu)</author>
      <guid>https://GaaraZhu.github.io/deep-clone/</guid>
      <description>背景  在实际开发中经常遇到属性克隆的问题，比如在表现层提交的Request DTO，可能需要在控制层被映射成多个Java Bean，再传递到逻辑层来进行相应的业务处理，那么如何才能简单而又快速的完成属性克隆呢？
对于仅仅包含简单属性的Java Bean来说，Apache Commons里的BeanUtils 是个不错的选择，不过前提是对应属性必须具备相同的属性名。但是对于复杂属性来说， 如果两个属性的类型不同，或者类型参数不同，使用BeanUtils的时候都要格外小心。
举个例子： InvoiceDTO和InvoiceBean里面都有两个属性amount和charges，类型定义如下：
InvoiceDTO [ amount -&amp;gt; AmountDTO, charges -&amp;gt; List] InvoiceBean [ amount -&amp;gt;AmountBean, charges -&amp;gt; List]</description>
    </item>
    
    <item>
      <title>基于Aviator的注解驱动验证框架</title>
      <link>https://GaaraZhu.github.io/aviator-validator/</link>
      <pubDate>Sat, 25 Aug 2012 09:20:14 +1300</pubDate>
      <author>sec.gary@gmail.com (GaryZhu)</author>
      <guid>https://GaaraZhu.github.io/aviator-validator/</guid>
      <description>背景 
程序开发过程中，在同一系统中层层之间数据传递或者是异构系统之间同步异步通信的时候，我们经常需要对Java Bean进行属性验证，来决定是否继续后续process，或者直接抛出error message。
 传统解决方案 
传统的做法，给每个验证场景加一个验证类，专门负责所有属性的验证，以及验证结果的校验和处理，这种做法最直白，但是不够灵活。第二种就是Java 6自带的验证框架 Bean validation, 用注解的形式来表达属性对应的约束，Bean validation在很大程度上提高了数据验证的灵活性和复用性，但是第一，个人感觉扩展比较麻烦，首先你需要自定义个注解来代表对应的约束，其次你必须新建一个验证器，最后你必须在注解类上做好两者的mapping，对于每种约束，都逃不开这三步；第二点，Bean validation只能完成bean中单一属性的验证，不支持跨属性验证。
 EasyValidation! 
第三种做法就是基于Aviator DIY的验证框架EasyValidation，Aviator是淘宝开发的一款java表达式求值工具，感兴趣的朋友可以google一下。为了灵活性，和Bean validation一样，EasyValidation也是注解驱动的。我们认为所谓的约束其实就是一个结果为 true 或者 false 的表达式，所以首先把这些约束表达式加在属性上面作为元数据，然后通过反射去获取表达式，最后利用aviator去求值，再对结果做处理。</description>
    </item>
    
  </channel>
</rss>
